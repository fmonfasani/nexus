version: '3.8'

services:
  # Frontend React + Vite
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: nexus_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_TURN_SERVER=turn:localhost:3478
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - nexus-network
    restart: unless-stopped

  # Backend Node.js + Express + TypeScript
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: nexus_backend
    ports:
      - "8000:8000"
      - "9229:9229"  # Debug port
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nexus
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-key-change-in-production
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://localhost:3000
      - WHISPER_API_URL=http://ai-services:8001
      - TURN_SERVER_URL=turn:turnserver:3478
      - TURN_USERNAME=nexus
      - TURN_CREDENTIAL=nexus123
    depends_on:
      - postgres
      - redis
    networks:
      - nexus-network
    restart: unless-stopped
    command: npm run dev:debug

  # AI Services Python + FastAPI
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile.dev
    container_name: nexus_ai_services
    ports:
      - "8001:8001"
    volumes:
      - ./ai-services:/app
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - API_PORT=8001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nexus
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN:-}
      - WHISPER_MODEL=base  # Use 'large-v3' in production
      - MCP_BROKER_URL=kafka://kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - nexus-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nexus_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=nexus
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nexus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: nexus_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka (Message Broker para MCP)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: nexus_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - nexus-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: nexus_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - nexus-network
    restart: unless-stopped

  # TURN/STUN Server para WebRTC
  turnserver:
    image: coturn/coturn:latest
    container_name: nexus_turnserver
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
      - "49152-49172:49152-49172/udp"
    environment:
      - TURN_USERNAME=nexus
      - TURN_PASSWORD=nexus123
    volumes:
      - ./infrastructure/turnserver/turnserver.conf:/etc/coturn/turnserver.conf
    networks:
      - nexus-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nexus_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
    networks:
      - nexus-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nexus-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: nexus_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nexus-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: nexus_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - nexus-network
    restart: unless-stopped

  # ElasticSearch para Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: nexus_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - nexus-network
    restart: unless-stopped

  # Kibana Dashboard
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: nexus_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - nexus-network
    restart: unless-stopped

networks:
  nexus-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local